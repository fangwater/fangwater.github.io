<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++内存分配-unqiue_ptr</title>
    <url>/2022/12/22/221222-1/</url>
    <content><![CDATA[<p>本文主要讨论内存角度对<code>C++</code>智能指针<code>unique_ptr</code>的观察</p>
<h2 id="Memory-usage-of-unique-ptr"><a href="#Memory-usage-of-unique-ptr" class="headerlink" title="Memory usage of unique_ptr"></a>Memory usage of unique_ptr</h2><p><code>unique_ptr</code>的内存模型如下<br><img src="/../imgs/22-12-24-0.png" alt="avatar"></p>
<p>由此不难理解,一般的<code>unique_ptr</code>和正常指针的空间占用相同,而当<code>unique_ptr</code>包含自己的<code>delete</code>,其需要在堆上开辟自己的内存空间</p>
<p>一个简单的例子</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_x;</span><br><span class="line">    <span class="type">int</span> m_y;</span><br><span class="line">    <span class="type">int</span> m_z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z):</span><br><span class="line">    <span class="built_in">m_x</span>(x),<span class="built_in">m_y</span>(y),<span class="built_in">m_z</span>(z)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*code here*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在x64下,显然不包含<code>delete</code>的<code>unique_ptr</code>大小是一个普通指针的大小,并没有额外的实现,这和其构造器的实现有关</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Widget* pw = <span class="keyword">new</span> <span class="built_in">Widget</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Widget&gt; <span class="title">w1</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    <span class="keyword">delete</span> pw;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(w1) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当<code>delete</code>是一个函数对象,则去居于函数对象额外数据大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DeleteObject</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Widget* w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> w;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Using DeleteObject&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int64_t</span> padding_size1;</span><br><span class="line">    <span class="type">int64_t</span> padding_size2;</span><br><span class="line">&#125;;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Widget,DeleteObject&gt; <span class="title">w2</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(w2) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//24,8 for ptr and 8+8 for padding</span></span><br></pre></td></tr></table></figure>
<p>使用lldb调试,打印w2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">w2</span></span></span><br><span class="line"><span class="function"><span class="params">(std::unique_ptr&lt;Widget, DeleteObject&gt;)</span> $0 </span>= <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">  deleter = (padding_size = <span class="number">0</span>, padding_size2 = <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针地址和是数据地址是连续的,函数在别的位置</p>
<p>当<code>delete</code>是一个函数指针,去取决于编译器实现,一般的会增大一个指针的大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteFunction</span><span class="params">(Widget* w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> w;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Using DeleteFunction&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//function delete</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_ptr&lt;Widget,<span class="title">void</span><span class="params">(*)</span><span class="params">(Widget*)</span>&gt; <span class="title">w3</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),DeleteFunction)</span></span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="built_in">sizeof</span>(w3) &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//16 function_ptr + unique_ptr</span></span><br></pre></td></tr></table></figure>
<p>此时函数指针的位置被设置在<code>deleter</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">w3</span></span></span><br><span class="line"><span class="function"><span class="params">(std::unique_ptr&lt;Widget, <span class="type">void</span> (*)(Widget *)&gt;)</span> $1 </span>= <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">  deleter = <span class="number">0x0000555555555220</span> (a.out`<span class="built_in">DeleteFunction</span>(Widget*) at unqiue_test.cpp:<span class="number">23</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当<code>deleter</code>是一个无状态函数,lamda表达式且不带捕获,则不会占用任何内存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lambda delete</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">auto</span> lam= [](Widget* w) &#123;</span><br><span class="line">        <span class="keyword">delete</span> w;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;lam delete w&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="function">std::unique_ptr&lt;Widget,<span class="title">decltype</span><span class="params">(lam)</span>&gt; <span class="title">w4</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),lam)</span></span>;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(w4) &lt;&lt; std::endl;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(lam) &lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以通过lldb观察,确实没有进行额外的储存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">w4</span></span></span><br><span class="line"><span class="function"><span class="params">(std::unique_ptr&lt;Widget, deleter_type&gt;)</span> $3 </span>= <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">&#125;</span><br><span class="line">(lldb) p <span class="built_in">lam</span></span><br><span class="line">(deleter_type) $<span class="number">4</span> = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用带捕获的<code>(&amp;)</code> lambda函数,则会获得额外的大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//lambda delete with &amp;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">auto</span> lam= [&amp;](Widget* w) &#123;</span><br><span class="line">        <span class="keyword">delete</span> w;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;lam delete w&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="function">std::unique_ptr&lt;Widget,<span class="title">decltype</span><span class="params">(lam)</span>&gt; <span class="title">w5</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),lam)</span></span>;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(w5) &lt;&lt; std::endl;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(lam) &lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体在内存中则是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">lam</span></span></span><br><span class="line"><span class="function"><span class="params">((unnamed <span class="keyword">class</span>))</span> $0 </span>= &#123;</span><br><span class="line">  x = <span class="number">0x00007fffffffdafc</span></span><br><span class="line">&#125;</span><br><span class="line">(lldb) p <span class="built_in">w5</span></span><br><span class="line">(std::unique_ptr&lt;Widget, (unnamed <span class="keyword">class</span>)&gt;) $<span class="number">1</span> = <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">  deleter = &#123;</span><br><span class="line">    x = <span class="number">0x00007fffffffdafc</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到额外保存了一份状态信息</p>
<p>那么C++是如何保存和unique_ptr匹配的lambda函数,这涉及到<code>EBO</code></p>
<ul>
<li><a href="/2022/12/24/221224-1/" title="C++编译优化-EBO">&#96;C++编译优化-EBO&#96;</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Course_report</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Memory</tag>
        <tag>Smart_pointer</tag>
      </tags>
  </entry>
  <entry>
    <title>C++11新特性解析与应用1</title>
    <url>/2022/12/24/221224-2/</url>
    <content><![CDATA[<p>C++11新特性解析与应用 阅读tips</p>
<h1 id="1-库和语言的实现-1-4-1"><a href="#1-库和语言的实现-1-4-1" class="headerlink" title="1 库和语言的实现(1.4.1)"></a>1 库和语言的实现(1.4.1)</h1><p>C++11中部分内容并未作为语言标准，也就是编译器实现的一部分，而是使用了库来实现，例如<code>std::thread,std::regex</code><br>其目的是因为随着语义越来越复杂，标准库可以控制复杂性的同时，减少核心语言特性</p>
<h1 id="2-func-2-1-2"><a href="#2-func-2-1-2" class="headerlink" title="2 func(2.1.2)"></a>2 <strong>func</strong>(2.1.2)</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> __func__;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">hello</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实质上存在一个编译器的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Tech</category>
        <category>Read_report</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++编译优化-EBO</title>
    <url>/2022/12/24/221224-1/</url>
    <content><![CDATA[<h1 id="Empty-Base-Class-Optimisation-EBO"><a href="#Empty-Base-Class-Optimisation-EBO" class="headerlink" title="Empty Base Class Optimisation (EBO)"></a>Empty Base Class Optimisation (EBO)</h1><p><code>EBO</code> 的方法是, 通过继承空基类来避免对象大小的增加</p>
<p>在C++中,一个empty object至少也要占一个字节, 但如果这个对象是以基类部分的形式存在,则不会占用额外的空间</p>
<p>具体的,如果<code>class A</code>为空,则 <code>class B : A</code> 不会增加大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A2</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span> : A1&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span> : A2&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(B1) &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; <span class="built_in">sizeof</span>(B2) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 4</span></span><br></pre></td></tr></table></figure>

<h1 id="How-unique-ptr-apply-EBO"><a href="#How-unique-ptr-apply-EBO" class="headerlink" title="How unique_ptr apply EBO"></a>How unique_ptr apply EBO</h1><p>一个<code>EBO</code>使用可见于无状态的<code>lambda deleter</code>在<code>unique_ptr</code> 上的应用</p>
<ul>
<li><a href="/2022/12/22/221222-1/" title="C++内存分配-unqiue_ptr">&#96;C++内存分配-unqiue_ptr</a></li>
</ul>
<p>具体的,参考g++ libc++观察对<code>__uniq_ptr_data</code>的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Dp = default_delete&lt;_Tp&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> unique_ptr&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">using</span> deleter_type  = _Dp;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    tuple&lt;pointer, _Dp&gt; _M_t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>_M_t</code>就是存放指针和<code>deleter</code>的位置, 做一个小的尝试</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">B1* b_ptr;</span><br><span class="line"><span class="function">std::tuple&lt;<span class="title">decltype</span><span class="params">(b_ptr)</span>,A1&gt; <span class="title">s</span><span class="params">(b_ptr,A1())</span></span>;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(s) &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//8, only b_ptr</span></span><br></pre></td></tr></table></figure>
<p>发现在tuple中,如果元素为空类,其大小会被优化, 由此引发两个问题</p>
<ul>
<li>[1]tuple如何确定A1是一个空类</li>
<li>[2]tuple如何存储这个空类</li>
</ul>
<p>可以在tuple的源码中找到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using EBO for elements that are tuples causes ambiguous base errors.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _El0, <span class="keyword">typename</span>... _El&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__is_empty_non_tuple</span>&lt;tuple&lt;_El0, _El...&gt;&gt; : false_type &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the Empty Base-class Optimization for empty, non-final types.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">using</span> __empty_not_final</span><br><span class="line">  = <span class="keyword">typename</span> conditional&lt;__is_final(_Tp), false_type,</span><br><span class="line">	   __is_empty_non_tuple&lt;_Tp&gt;&gt;::type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head,</span><br><span class="line">  <span class="type">bool</span> = __empty_not_final&lt;_Head&gt;::value&gt;</span><br><span class="line">  <span class="keyword">struct</span> _Head_base;</span><br></pre></td></tr></table></figure>
<pre><code>std::cout &lt;&lt; std::is_empty_v&lt;decltype(lam1)&gt; &lt;&lt; std::endl;
std::cout &lt;&lt; std::is_empty_v&lt;decltype(lam2)&gt; &lt;&lt; std::endl;
</code></pre>
<p>而其中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// is_empty</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">is_empty</span></span><br><span class="line">  : <span class="keyword">public</span> integral_constant&lt;<span class="type">bool</span>, __is_empty(_Tp)&gt;</span><br><span class="line">  &#123; &#125;;</span><br></pre></td></tr></table></figure>
<p>根据是否是空类,会用不同的判定</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> lam1= [&amp;](<span class="type">int</span> y) &#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;lam with state&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(lam1) &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">auto</span> lam2 = [](<span class="type">int</span> y) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;lam without state&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; std::is_empty_v&lt;<span class="keyword">decltype</span>(lam1)&gt; &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; std::is_empty_v&lt;<span class="keyword">decltype</span>(lam2)&gt; &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 0 1</span></span><br></pre></td></tr></table></figure>
<p>tuple实现的时候,</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head, <span class="keyword">typename</span>... _Tail&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_Tuple_impl</span>&lt;_Idx, _Head, _Tail...&gt;</span><br><span class="line">  : <span class="keyword">public</span> _Tuple_impl&lt;_Idx + <span class="number">1</span>, _Tail...&gt;,</span><br><span class="line">    <span class="keyword">private</span> _Head_base&lt;_Idx, _Head&gt;</span><br></pre></td></tr></table></figure>

<p> <code>public</code> 继承表达的<code>is-a</code>关系，<code>private</code> 继承隐含的意思其实是 <code>is-implemented-in-terms-of</code>，即<code>由…实现出</code><br>这里表示,<code>_Head_base</code>是其中的一部分,我们获得了<code>_Head_base</code>的接口,但这只是一个特化的空类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;std::<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head, <span class="type">bool</span> = __empty_not_final&lt;_Head&gt;::value&gt;</span><br><span class="line"><span class="keyword">struct</span> _Head_base;</span><br><span class="line"><span class="keyword">template</span>&lt;std::<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Head_base</span>&lt;_Idx, _Head, <span class="literal">true</span>&gt; : <span class="keyword">public</span> _Head</span><br><span class="line">&#123; &#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Memory</tag>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>新冠感染记录1</title>
    <url>/2022/12/27/221227-1/</url>
    <content><![CDATA[<h1 id="新冠感染记录"><a href="#新冠感染记录" class="headerlink" title="新冠感染记录"></a>新冠感染记录</h1><p>记录上海开放后的感染记录</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>体感症状</th>
<th>抗原</th>
</tr>
</thead>
<tbody><tr>
<td>2022-12-25-9:00</td>
<td>肩背发力不畅,手背,手腕关节偶发酸软</td>
<td>neg</td>
</tr>
<tr>
<td>2022-12-25-18:00</td>
<td>嗓子有轻微干痒,不咳嗽</td>
<td>neg</td>
</tr>
<tr>
<td>2022-12-25-20:00</td>
<td>畏寒,酸软增加腿部(轻微,不持续)</td>
<td>neg</td>
</tr>
<tr>
<td>2022-12-25-22:00</td>
<td>低烧,37-38,长思考断片,疲劳,嗓子不适消失,一般对话聊天逻辑没有问题</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-25-1:28</td>
<td>低烧,最后一次测量37.1</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-26-7:40</td>
<td>退烧,有疲劳感,剧烈动作有眩晕感,嘴唇有一处溃疡</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-26-10:00</td>
<td>咽喉不适明显,已无发烧相关症状,恢复办公</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-26-19:00</td>
<td>咽喉不适明显,咳嗽,有黄痰,怀疑合并感染,服阿莫西林0.5*2g</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-27-4:00</td>
<td>再无黄痰,白痰+流涕,咽喉干痒,偶尔咳嗽</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-27-8:40</td>
<td>喉咙依然不适,症状变化不大,鼻涕增多</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-27-14:25</td>
<td>喉咙依然不适,症状变化不大</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-27-22:00</td>
<td>喉咙依然不适,症状变化不大</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-28-9:30</td>
<td>喉咙不适,刚起来比较干燥</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-28-12:00</td>
<td>喉咙不适,流鼻涕多,鼻塞</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-28-13:39</td>
<td>喉咙依然不适,痒,但吞咽的不适已经消失很多</td>
<td>pos</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Life</category>
        <category>Record</category>
      </categories>
      <tags>
        <tag>COVID_19</tag>
      </tags>
  </entry>
  <entry>
    <title>C++内存分配-shared_ptr和weak_ptr</title>
    <url>/2022/12/28/221228-1/</url>
    <content><![CDATA[<p>本文主要讨论内存角度对<code>C++</code>智能指针<code>shared_ptr和weak_ptr</code>的观察</p>
<p>这一部分的讨论不在于其内存是如何分配和构造,而在于如何恰当的使用</p>
<p><code>shared_ptr和weak_ptr</code>具有如下的数据结构<br><img src="/../imgs/22-12-28-0.png" alt="avatar"></p>
<p>首先,不必过于关注控制块的内存开销,其实质上<code>shared_ptr和weak_ptr</code>一般是多个指针对应一个对象，因此摊销之后成本有限</p>
<h2 id="make-shared的使用"><a href="#make-shared的使用" class="headerlink" title="make_shared的使用"></a>make_shared的使用</h2><p>make_shared理论上是一个更好的选择，因为原生指针对象和控制块一次进行分配，可以增加cache的局部性，更主要是减少一次内存分配的开销</p>
<p>如果只使用shared_ptr，而不用<code>weak_ptr</code>的情况，至少<code>make_shared</code>在大部分时候应该没有问题，但如果同时使用了<code>shared_ptr和weak_ptr</code>, 一种情况是, shared_ptr已经全部释放，相当于引用计数为0，但还有<code>weak_ptr</code>没有离开作用域，导致延迟了内存的释放事件，尤其是在内存紧张的嵌入式环境需要考虑</p>
<h2 id="enable-shared-from-this原理"><a href="#enable-shared-from-this原理" class="headerlink" title="enable_shared_from_this原理"></a>enable_shared_from_this原理</h2><h3 id="何时需要enable-shared-from-this"><a href="#何时需要enable-shared-from-this" class="headerlink" title="何时需要enable_shared_from_this"></a>何时需要<code>enable_shared_from_this</code></h3><p>当需要this指针封装<code>shared_ptr</code>, <code>shared_ptr&lt;T&gt;(this)</code>这种用法是错误的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">shared_ptr&lt;Widget&gt; <span class="title">getWidget</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;Widget&gt;(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Widget</span>()&#123; cout &lt;&lt; <span class="string">&quot;~widget &quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;Widget&gt; <span class="title">sp1</span><span class="params">(<span class="keyword">new</span> Widget())</span></span>;</span><br><span class="line">    shared_ptr&lt;Widget&gt; sp2 = sp1-&gt;<span class="built_in">getWidget</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sp1和sp2显然指向同一个对象，但是引用计数都是1，对于上述问题，原因在于sp1和sp2对应两个控制块，但只指向了一个对象，属于双重所有权的问题，最后导致了double free</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">sp1</span></span></span><br><span class="line"><span class="function"><span class="params">(std::shared_ptr&lt;Widget&gt;)</span> $0 </span>= std::__shared_ptr&lt;Widget, __gnu_cxx::_S_atomic&gt;::element_type @ <span class="number">0x000055555556aeb0</span> &#123;</span><br><span class="line">  _M_ptr = <span class="number">0x000055555556aeb0</span></span><br><span class="line">&#125;</span><br><span class="line">(lldb) p <span class="built_in">sp2</span></span><br><span class="line">(std::shared_ptr&lt;Widget&gt;) $<span class="number">1</span> = std::__shared_ptr&lt;Widget, __gnu_cxx::_S_atomic&gt;::element_type @ <span class="number">0x000055555556aeb0</span> &#123;</span><br><span class="line">  _M_ptr = <span class="number">0x000055555556aeb0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当一个对象希望通过shared_ptr分享所有权，应该采用<code>enable_shared_from_this</code></p>
<p>使用<code>enable_shared_from_this的</code>构造的内存模型如下<br><img src="/../imgs/22-12-28-1.png" alt="avatar"></p>
<p>对于类型<code>enable_shared_from_this</code>，其实现手段是自己存储了一个<code>weak_ptr</code>，在构造时赋值，<br>当使用<code>shared_from_this</code>，实际用这个weak_ptr生成</p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Course_report</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Memory</tag>
        <tag>Smart_pointer</tag>
      </tags>
  </entry>
  <entry>
    <title>Python代码加速实践(1)</title>
    <url>/2022/12/28/221228-2/</url>
    <content><![CDATA[<p>需求为，评估一段策略代码(python)实现，设计和实现C++的加速方案，具体的策略实现由于保密性，<br>不会给出，因此只有几个函数，以及部分样例数据</p>
<p>因此首先需要梳理函数之间的call_map,暂时不考虑并行部分，评估基本开销</p>
<p>梳理后得到下图</p>
<p>可见主体函数为resample_day </p>
<p>pivoting<br>参数<br>feature<br>df<br>hfq_multi_1min</p>
<p>save_feature<br>函数基本功能为 根据feature的种类 和 精度 队数据进行简单的处理 然后保存</p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>工程实践</category>
        <category>量化策略</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
