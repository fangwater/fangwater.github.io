<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++内存分配-unqiue_ptr</title>
    <url>/2022/12/22/221222-1/</url>
    <content><![CDATA[<p>本文主要讨论内存角度对<code>C++</code>智能指针<code>unique_ptr</code>的观察</p>
<h2 id="Memory-usage-of-unique-ptr"><a href="#Memory-usage-of-unique-ptr" class="headerlink" title="Memory usage of unique_ptr"></a>Memory usage of unique_ptr</h2><p><code>unique_ptr</code>的内存模型如下<br><img src="/../imgs/22-12-24-0.png" alt="avatar"></p>
<p>由此不难理解,一般的<code>unique_ptr</code>和正常指针的空间占用相同,而当<code>unique_ptr</code>包含自己的<code>delete</code>,其需要在堆上开辟自己的内存空间</p>
<p>一个简单的例子</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_x;</span><br><span class="line">    <span class="type">int</span> m_y;</span><br><span class="line">    <span class="type">int</span> m_z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z):</span><br><span class="line">    <span class="built_in">m_x</span>(x),<span class="built_in">m_y</span>(y),<span class="built_in">m_z</span>(z)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*code here*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在x64下,显然不包含<code>delete</code>的<code>unique_ptr</code>大小是一个普通指针的大小,并没有额外的实现,这和其构造器的实现有关</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Widget* pw = <span class="keyword">new</span> <span class="built_in">Widget</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Widget&gt; <span class="title">w1</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    <span class="keyword">delete</span> pw;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(w1) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当<code>delete</code>是一个函数对象,则去居于函数对象额外数据大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DeleteObject</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Widget* w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> w;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Using DeleteObject&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int64_t</span> padding_size1;</span><br><span class="line">    <span class="type">int64_t</span> padding_size2;</span><br><span class="line">&#125;;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Widget,DeleteObject&gt; <span class="title">w2</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(w2) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//24,8 for ptr and 8+8 for padding</span></span><br></pre></td></tr></table></figure>
<p>使用lldb调试,打印w2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">w2</span></span></span><br><span class="line"><span class="function"><span class="params">(std::unique_ptr&lt;Widget, DeleteObject&gt;)</span> $0 </span>= <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">  deleter = (padding_size = <span class="number">0</span>, padding_size2 = <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针地址和是数据地址是连续的,函数在别的位置</p>
<p>当<code>delete</code>是一个函数指针,去取决于编译器实现,一般的会增大一个指针的大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteFunction</span><span class="params">(Widget* w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> w;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Using DeleteFunction&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//function delete</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_ptr&lt;Widget,<span class="title">void</span><span class="params">(*)</span><span class="params">(Widget*)</span>&gt; <span class="title">w3</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),DeleteFunction)</span></span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="built_in">sizeof</span>(w3) &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//16 function_ptr + unique_ptr</span></span><br></pre></td></tr></table></figure>
<p>此时函数指针的位置被设置在<code>deleter</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">w3</span></span></span><br><span class="line"><span class="function"><span class="params">(std::unique_ptr&lt;Widget, <span class="type">void</span> (*)(Widget *)&gt;)</span> $1 </span>= <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">  deleter = <span class="number">0x0000555555555220</span> (a.out`<span class="built_in">DeleteFunction</span>(Widget*) at unqiue_test.cpp:<span class="number">23</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当<code>deleter</code>是一个无状态函数,lamda表达式且不带捕获,则不会占用任何内存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lambda delete</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">auto</span> lam= [](Widget* w) &#123;</span><br><span class="line">        <span class="keyword">delete</span> w;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;lam delete w&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="function">std::unique_ptr&lt;Widget,<span class="title">decltype</span><span class="params">(lam)</span>&gt; <span class="title">w4</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),lam)</span></span>;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(w4) &lt;&lt; std::endl;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(lam) &lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以通过lldb观察,确实没有进行额外的储存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">w4</span></span></span><br><span class="line"><span class="function"><span class="params">(std::unique_ptr&lt;Widget, deleter_type&gt;)</span> $3 </span>= <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">&#125;</span><br><span class="line">(lldb) p <span class="built_in">lam</span></span><br><span class="line">(deleter_type) $<span class="number">4</span> = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用带捕获的<code>(&amp;)</code> lambda函数,则会获得额外的大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//lambda delete with &amp;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">auto</span> lam= [&amp;](Widget* w) &#123;</span><br><span class="line">        <span class="keyword">delete</span> w;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;lam delete w&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="function">std::unique_ptr&lt;Widget,<span class="title">decltype</span><span class="params">(lam)</span>&gt; <span class="title">w5</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),lam)</span></span>;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(w5) &lt;&lt; std::endl;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(lam) &lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体在内存中则是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">lam</span></span></span><br><span class="line"><span class="function"><span class="params">((unnamed <span class="keyword">class</span>))</span> $0 </span>= &#123;</span><br><span class="line">  x = <span class="number">0x00007fffffffdafc</span></span><br><span class="line">&#125;</span><br><span class="line">(lldb) p <span class="built_in">w5</span></span><br><span class="line">(std::unique_ptr&lt;Widget, (unnamed <span class="keyword">class</span>)&gt;) $<span class="number">1</span> = <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">  deleter = &#123;</span><br><span class="line">    x = <span class="number">0x00007fffffffdafc</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到额外保存了一份状态信息</p>
<p>那么C++是如何保存和unique_ptr匹配的lambda函数,这涉及到<code>EBO</code></p>
<ul>
<li><a href="/2022/12/24/221224-1/" title="C++编译优化-EBO">&#96;C++编译优化-EBO&#96;</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Course_report</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Memory</tag>
        <tag>Smart_pointer</tag>
      </tags>
  </entry>
  <entry>
    <title>C++11新特性解析与应用1</title>
    <url>/2022/12/24/221224-2/</url>
    <content><![CDATA[<p>C++11新特性解析与应用 阅读tips</p>
<h1 id="1-库和语言的实现-1-4-1"><a href="#1-库和语言的实现-1-4-1" class="headerlink" title="1 库和语言的实现(1.4.1)"></a>1 库和语言的实现(1.4.1)</h1><p>C++11中部分内容并未作为语言标准，也就是编译器实现的一部分，而是使用了库来实现，例如<code>std::thread,std::regex</code><br>其目的是因为随着语义越来越复杂，标准库可以控制复杂性的同时，减少核心语言特性</p>
<h1 id="2-func-2-1-2"><a href="#2-func-2-1-2" class="headerlink" title="2 func(2.1.2)"></a>2 <strong>func</strong>(2.1.2)</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> __func__;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">hello</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实质上存在一个编译器的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Tech</category>
        <category>Read_report</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++编译优化-EBO</title>
    <url>/2022/12/24/221224-1/</url>
    <content><![CDATA[<h1 id="Empty-Base-Class-Optimisation-EBO"><a href="#Empty-Base-Class-Optimisation-EBO" class="headerlink" title="Empty Base Class Optimisation (EBO)"></a>Empty Base Class Optimisation (EBO)</h1><p><code>EBO</code> 的方法是, 通过继承空基类来避免对象大小的增加</p>
<p>在C++中,一个empty object至少也要占一个字节, 但如果这个对象是以基类部分的形式存在,则不会占用额外的空间</p>
<p>具体的,如果<code>class A</code>为空,则 <code>class B : A</code> 不会增加大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A2</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span> : A1&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span> : A2&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(B1) &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; <span class="built_in">sizeof</span>(B2) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 4</span></span><br></pre></td></tr></table></figure>

<h1 id="How-unique-ptr-apply-EBO"><a href="#How-unique-ptr-apply-EBO" class="headerlink" title="How unique_ptr apply EBO"></a>How unique_ptr apply EBO</h1><p>一个<code>EBO</code>使用可见于无状态的<code>lambda deleter</code>在<code>unique_ptr</code> 上的应用</p>
<ul>
<li><a href="/2022/12/22/221222-1/" title="C++内存分配-unqiue_ptr">&#96;C++内存分配-unqiue_ptr</a></li>
</ul>
<p>具体的,参考g++ libc++观察对<code>__uniq_ptr_data</code>的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Dp = default_delete&lt;_Tp&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> unique_ptr&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">using</span> deleter_type  = _Dp;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    tuple&lt;pointer, _Dp&gt; _M_t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>_M_t</code>就是存放指针和<code>deleter</code>的位置, 做一个小的尝试</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">B1* b_ptr;</span><br><span class="line"><span class="function">std::tuple&lt;<span class="title">decltype</span><span class="params">(b_ptr)</span>,A1&gt; <span class="title">s</span><span class="params">(b_ptr,A1())</span></span>;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(s) &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//8, only b_ptr</span></span><br></pre></td></tr></table></figure>
<p>发现在tuple中,如果元素为空类,其大小会被优化, 由此引发两个问题</p>
<ul>
<li>[1]tuple如何确定A1是一个空类</li>
<li>[2]tuple如何存储这个空类</li>
</ul>
<p>可以在tuple的源码中找到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using EBO for elements that are tuples causes ambiguous base errors.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _El0, <span class="keyword">typename</span>... _El&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__is_empty_non_tuple</span>&lt;tuple&lt;_El0, _El...&gt;&gt; : false_type &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the Empty Base-class Optimization for empty, non-final types.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">using</span> __empty_not_final</span><br><span class="line">  = <span class="keyword">typename</span> conditional&lt;__is_final(_Tp), false_type,</span><br><span class="line">	   __is_empty_non_tuple&lt;_Tp&gt;&gt;::type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head,</span><br><span class="line">  <span class="type">bool</span> = __empty_not_final&lt;_Head&gt;::value&gt;</span><br><span class="line">  <span class="keyword">struct</span> _Head_base;</span><br></pre></td></tr></table></figure>
<pre><code>std::cout &lt;&lt; std::is_empty_v&lt;decltype(lam1)&gt; &lt;&lt; std::endl;
std::cout &lt;&lt; std::is_empty_v&lt;decltype(lam2)&gt; &lt;&lt; std::endl;
</code></pre>
<p>而其中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// is_empty</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">is_empty</span></span><br><span class="line">  : <span class="keyword">public</span> integral_constant&lt;<span class="type">bool</span>, __is_empty(_Tp)&gt;</span><br><span class="line">  &#123; &#125;;</span><br></pre></td></tr></table></figure>
<p>根据是否是空类,会用不同的判定</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> lam1= [&amp;](<span class="type">int</span> y) &#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;lam with state&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(lam1) &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">auto</span> lam2 = [](<span class="type">int</span> y) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;lam without state&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; std::is_empty_v&lt;<span class="keyword">decltype</span>(lam1)&gt; &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; std::is_empty_v&lt;<span class="keyword">decltype</span>(lam2)&gt; &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 0 1</span></span><br></pre></td></tr></table></figure>
<p>tuple实现的时候,</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head, <span class="keyword">typename</span>... _Tail&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_Tuple_impl</span>&lt;_Idx, _Head, _Tail...&gt;</span><br><span class="line">  : <span class="keyword">public</span> _Tuple_impl&lt;_Idx + <span class="number">1</span>, _Tail...&gt;,</span><br><span class="line">    <span class="keyword">private</span> _Head_base&lt;_Idx, _Head&gt;</span><br></pre></td></tr></table></figure>

<p> <code>public</code> 继承表达的<code>is-a</code>关系，<code>private</code> 继承隐含的意思其实是 <code>is-implemented-in-terms-of</code>，即<code>由…实现出</code><br>这里表示,<code>_Head_base</code>是其中的一部分,我们获得了<code>_Head_base</code>的接口,但这只是一个特化的空类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;std::<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head, <span class="type">bool</span> = __empty_not_final&lt;_Head&gt;::value&gt;</span><br><span class="line"><span class="keyword">struct</span> _Head_base;</span><br><span class="line"><span class="keyword">template</span>&lt;std::<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Head_base</span>&lt;_Idx, _Head, <span class="literal">true</span>&gt; : <span class="keyword">public</span> _Head</span><br><span class="line">&#123; &#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Memory</tag>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>新冠感染记录1</title>
    <url>/2022/12/27/221227-1/</url>
    <content><![CDATA[<h1 id="新冠感染记录"><a href="#新冠感染记录" class="headerlink" title="新冠感染记录"></a>新冠感染记录</h1><p>记录上海开放后的感染记录</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>体感症状</th>
<th>抗原</th>
</tr>
</thead>
<tbody><tr>
<td>2022-12-25-9:00</td>
<td>肩背发力不畅,手背,手腕关节偶发酸软</td>
<td>neg</td>
</tr>
<tr>
<td>2022-12-25-18:00</td>
<td>嗓子有轻微干痒,不咳嗽</td>
<td>neg</td>
</tr>
<tr>
<td>2022-12-25-20:00</td>
<td>畏寒,酸软增加腿部(轻微,不持续)</td>
<td>neg</td>
</tr>
<tr>
<td>2022-12-25-22:00</td>
<td>低烧,37-38,长思考断片,疲劳,嗓子不适消失,一般对话聊天逻辑没有问题</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-25-1:28</td>
<td>低烧,最后一次测量37.1</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-26-7:40</td>
<td>退烧,有疲劳感,剧烈动作有眩晕感,嘴唇有一处溃疡</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-26-10:00</td>
<td>咽喉不适明显,已无发烧相关症状,恢复办公</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-26-19:00</td>
<td>咽喉不适明显,咳嗽,有黄痰,怀疑合并感染,服阿莫西林0.5*2g</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-27-4:00</td>
<td>再无黄痰,白痰+流涕,咽喉干痒,偶尔咳嗽</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-27-8:40</td>
<td>喉咙依然不适,症状变化不大,鼻涕增多</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-27-14:25</td>
<td>喉咙依然不适,症状变化不大</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-27-22:00</td>
<td>喉咙依然不适,症状变化不大</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-28-9:30</td>
<td>喉咙不适,刚起来比较干燥</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-28-12:00</td>
<td>喉咙不适,流鼻涕多,鼻塞</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-28-13:39</td>
<td>喉咙依然不适,痒,但吞咽的不适已经消失很多</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-30-09:00</td>
<td>干咳</td>
<td>pos</td>
</tr>
<tr>
<td>2022-12-31-18:00</td>
<td>干咳</td>
<td>弱阳</td>
</tr>
<tr>
<td>2023-01-01-18:00</td>
<td>几乎不阳</td>
<td>弱阳</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Life</category>
        <category>Record</category>
      </categories>
      <tags>
        <tag>COVID_19</tag>
      </tags>
  </entry>
  <entry>
    <title>C++内存分配-shared_ptr和weak_ptr</title>
    <url>/2022/12/28/221228-1/</url>
    <content><![CDATA[<p>本文主要讨论内存角度对<code>C++</code>智能指针<code>shared_ptr和weak_ptr</code>的观察</p>
<p>这一部分的讨论不在于其内存是如何分配和构造,而在于如何恰当的使用</p>
<p><code>shared_ptr和weak_ptr</code>具有如下的数据结构<br><img src="/../imgs/22-12-28-0.png" alt="avatar"></p>
<p>首先,不必过于关注控制块的内存开销,其实质上<code>shared_ptr和weak_ptr</code>一般是多个指针对应一个对象，因此摊销之后成本有限</p>
<h2 id="make-shared的使用"><a href="#make-shared的使用" class="headerlink" title="make_shared的使用"></a>make_shared的使用</h2><p>make_shared理论上是一个更好的选择，因为原生指针对象和控制块一次进行分配，可以增加cache的局部性，更主要是减少一次内存分配的开销</p>
<p>如果只使用shared_ptr，而不用<code>weak_ptr</code>的情况，至少<code>make_shared</code>在大部分时候应该没有问题，但如果同时使用了<code>shared_ptr和weak_ptr</code>, 一种情况是, shared_ptr已经全部释放，相当于引用计数为0，但还有<code>weak_ptr</code>没有离开作用域，导致延迟了内存的释放事件，尤其是在内存紧张的嵌入式环境需要考虑</p>
<h2 id="enable-shared-from-this原理"><a href="#enable-shared-from-this原理" class="headerlink" title="enable_shared_from_this原理"></a>enable_shared_from_this原理</h2><h3 id="何时需要enable-shared-from-this"><a href="#何时需要enable-shared-from-this" class="headerlink" title="何时需要enable_shared_from_this"></a>何时需要<code>enable_shared_from_this</code></h3><p>当需要this指针封装<code>shared_ptr</code>, <code>shared_ptr&lt;T&gt;(this)</code>这种用法是错误的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">shared_ptr&lt;Widget&gt; <span class="title">getWidget</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">shared_ptr</span>&lt;Widget&gt;(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Widget</span>()&#123; cout &lt;&lt; <span class="string">&quot;~widget &quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;Widget&gt; <span class="title">sp1</span><span class="params">(<span class="keyword">new</span> Widget())</span></span>;</span><br><span class="line">    shared_ptr&lt;Widget&gt; sp2 = sp1-&gt;<span class="built_in">getWidget</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sp1和sp2显然指向同一个对象，但是引用计数都是1，对于上述问题，原因在于sp1和sp2对应两个控制块，但只指向了一个对象，属于双重所有权的问题，最后导致了double free</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">sp1</span></span></span><br><span class="line"><span class="function"><span class="params">(std::shared_ptr&lt;Widget&gt;)</span> $0 </span>= std::__shared_ptr&lt;Widget, __gnu_cxx::_S_atomic&gt;::element_type @ <span class="number">0x000055555556aeb0</span> &#123;</span><br><span class="line">  _M_ptr = <span class="number">0x000055555556aeb0</span></span><br><span class="line">&#125;</span><br><span class="line">(lldb) p <span class="built_in">sp2</span></span><br><span class="line">(std::shared_ptr&lt;Widget&gt;) $<span class="number">1</span> = std::__shared_ptr&lt;Widget, __gnu_cxx::_S_atomic&gt;::element_type @ <span class="number">0x000055555556aeb0</span> &#123;</span><br><span class="line">  _M_ptr = <span class="number">0x000055555556aeb0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当一个对象希望通过shared_ptr分享所有权，应该采用<code>enable_shared_from_this</code></p>
<p>使用<code>enable_shared_from_this的</code>构造的内存模型如下<br><img src="/../imgs/22-12-28-1.png" alt="avatar"></p>
<p>对于类型<code>enable_shared_from_this</code>，其实现手段是自己存储了一个<code>weak_ptr</code>，在构造时赋值，<br>当使用<code>shared_from_this</code>，实际用这个weak_ptr生成</p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>Course_report</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Memory</tag>
        <tag>Smart_pointer</tag>
      </tags>
  </entry>
  <entry>
    <title>Python代码加速实践(1)</title>
    <url>/2022/12/28/221228-2/</url>
    <content><![CDATA[<p>需求为，评估一段策略代码(python)实现，设计和实现C++的加速方案，具体的策略实现由于保密性，<br>不会给出，因此只有几个函数，以及部分样例数据</p>
<p>因此首先需要梳理函数之间的call_map,暂时不考虑并行部分，评估基本开销</p>
<p>梳理后得到下图</p>
<p>可见主体函数为resample_day </p>
<p>pivoting<br>参数<br>feature<br>df<br>hfq_multi_1min</p>
<p>save_feature<br>函数基本功能为 根据feature的种类 和 精度 队数据进行简单的处理 然后保存</p>
]]></content>
      <categories>
        <category>Tech</category>
        <category>工程实践</category>
        <category>量化策略</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>C++11新特性解析与应用1</title>
    <url>/2022/12/25/221225-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Tech</category>
        <category>Read_report</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>230101-1</title>
    <url>/2023/01/01/230101-1/</url>
    <content><![CDATA[<p>面向计算机视觉系统的延迟分析与优化</p>
<p>1 绪论<br>1.1研究的背景和意义<br>当代计算机视觉系统已经超过了传统的数字信号和影像学范畴 [14]，受益于深度学习算法的<br>快速进步，对于计算机系统的会有全新定义，现代计算机视觉的中心问题可以概括性的总结为<br>3R[13]，包括认识 (Recognition)，重建 (Reconstruction)，重组 (Reorganization), 其复杂程度和可用<br>程度可以一定程度参考 1.1.1顺序.<br>其中识别任务是计算机视觉系统工业化运用最成功的典范，主要尤其是目标检测和识别领<br>域，其部署和运行在各类平台，以论文本身探讨的场景为例，其实际应用于上海市虹口等地区的<br>交通业务平台，其应用场景例如在交通识别的任务上.<br>对机动车，非机动车的识别等车辆的违规识别，以及对于道路交通流量的统计，这一类型主<br>要可以概括为识别任务和检测任务，针对的主要是具体的事物属性，也有类似于对车牌进行框选，<br>进一步识别车牌数字，和对于行人的分析，除去对人脸进行关键点检测，也有对性别，年龄等进<br>行属性识别，这在标注和检测上更进一步，有时需要引入具体的业务逻辑<br>随着计算机视觉算法性能的不断提升，其在工业场景中的利用也得到了迅速的拓展，<br>1.2国内外研究现状<br>计算机视觉系统的推理流程<br>工业级计算机视觉系统的推理部署的要求<br>计算机视觉系统的延迟可观测性与相关实践</p>
<p>计算机视觉系统的延迟测量</p>
<ul>
<li>不同目的的延迟测量<br>– 调试构建（debug build）正式构建（release build）<br>和一般的服务端程序开发流程一致，计算机视觉系统的部署一般分为 调试构建（debug build）正式构建（release build）两个阶段</li>
</ul>
<p>调试构建（debug build）主要为开发阶段的性能调试，可以容许较为宽松的性能负荷，其主要目的在于对软件功能的正确性验证，以及对性能，功耗等多方面的调优。其特点在于可以占用比实际环境更高的资源，输出更多的日志信息，只需要达到观测的目的即可。</p>
<p>具体的，例如对于在谷歌公司开源的日志库google log中, 就提供了针对调试阶段的DEBUG_LOG和一般的LOG，其中DEBUG_LOG包含了很多静态的编译检查功能，当软件进入正式构建是，会被编译器优化成零开销的语句。</p>
<p>即便日志工具做出了足够的性能优化，但是系统依然具有和日志量同等增长速度的额外开销，并且存在灵活性的缺点</p>
<p>对于计算机视觉系统的调试阶段而言，延迟观测的目的主要服务于性能优化，依据软件运行的热点路径，查找计算和存储上的性能瓶颈，然后进行针对性的优化。热点路径的优化方法主要为通过函数调用的计时和堆栈跟踪，查找和分析调用次数高，耗时占比大的函数，并参考阿姆达尔定律对此部分进行优化和调整。</p>
<p>和一般论文的实验性质部署不同，具体而言，论文的部署一般基于考虑对单个算法进行性能评估，其重点指标在于考察在验证集合(eval data)上的固定指标例如正确率和准确率(Recall&#x2F;P)。其数据输出一般是以批为单位，分次通过单个多层模型，然后批次输出。即便有数据增强，数据前处理和数据后处理等数据的处理步骤，其运算的过程依然是依照线性流程步骤的管道模式(pipline)，其数据的运行流程是固定且简单的。</p>
<p>工业级的计算机视觉系统部署不会面向算法而是面向任务，一般会保持多个推理模型。例如OCR()，其需要处理的包括分割，识别等多个需要深度学习算法模型参与的环节，其数据输入一般以视频信号为主，其可能需要并发的运行多个算法流程，并异步的输出各种结果，并通过网络以序列化协议(pro)，或者通过文件以标准或者非标准IO的方式输出结果。其运算过程类似于一个异步执行的有向无环图，往往涉及到线程池和资源争用等待等问题，因此单个环节的执行时间具有一定的波动性。</p>
<p>基于此种需求，考虑上文表示概念的有向无环图，基于日志的延迟测量方法一般会在数据通过图的各个节点时输出日志，其日志形式一般为可读字符串，包含一部分用于匹配的元数据信息，和基本的时间信息，通过标准文件IO写入到日志文件中。收集到的日志会再次通过分析和处理(parser)工具获取。其主要的优点在于输出内容灵活，标准打印输出的方式兼容性高，绝大多数的语言和系统都能兼容。缺点在于性能开销尤其是在日志输出量大的时候较为可观，且因为本身的输出环节是在运行过程中进行代码嵌入，无论是修改输出的内容还是格式，都必须对程序的源代码进行修改，实质上在设计的层面把检测程序延迟的部分框架和程序的功能本身耦合在一起，不符合软件工程低内聚的原则，带来了二次开发的不便。</p>
<p>– 面向稳定性监测的延迟测量<br>正式构建（release build）一般是全部开发和功能验证以及全部结束之后的测试。一个常见的指标是QOS(quality of service)，以服务质量的角度描述一个系统的性能。从系统延迟的角度，一般会考虑服务<br>从收到请求到返回结果的消耗绝对时间作为测量标准，但一般考察的不是延迟的值，而是延迟时间在一定数据规模上所服从的分布。考虑到视觉类系统一般不运行在传统的CPU服务器上，而是依赖于特定的芯片组成的AI异构计算平台负责推理部分，例如英伟达的GPU，或者类似于寒武纪，等，直接以完整的主板形式提供推理和一部分计算，其硬件差异化非常明显，算力差别和推理精度都有较大的差异，因此同一个算法的部署的可用性考量需要根据具体硬件平台和软件平台的性能，一般的方式是根据实际的运行实验结果，参考性的给出一个阈值作为标准，延迟低于阈值则视为服务可用。</p>
<p>这类延迟的测量一般会优先排除网络环境的干扰，优先进行压力测试，其内容主要为评估软件在指定的负载下，是否可以保持服务的可用性。常规的测试方式会在固定的软硬件集成平台下(相同的软件系统和硬件),不断提高服务的请求频率，测试出在服务延迟质量不会下降范围内的最大可承载请求量，以此作为更上层系统的软件参考，具体的，当上层系统需要增加请求规模，则需要添加新的硬件设备来支持服务。这种方式的局限性较多，例如集成平台不一定完全被甲方采用，或者再更高层次的集成中会和其他业务互相影响，又或者在实际实施的过程中，例如网络延迟等部分是软件开发阶段很难进行仿真和测量的，因此压力的测试结果绝大多数情况下只能作为参考性的指标，多数情况下依然需要技术人员的驻场支持。</p>
<p>对于计算机视觉系统的部署，例如一般的目标检测类服务，包括人脸识别，交通车辆识别等，通常需要长时间的保持可用，对于嵌入式部署等场景，其吞吐和负载有严格的限制，输入一般会匹配固定数量的传感器设备(摄像头),不会出现类似互联网服务端部署，client应用的峰谷弹性较大。且部分例如安防等场景，一种常见的情况是一部分服务仅在内网运行，其网络延迟稳定处于较低水平，一部分服务部署在外网，其存在一定的波动性，可能会存在因为网络导致的服务间歇性不可用，这里和互联网应用的差异性在于，由于硬件平台的差异和部署的差异，互联网的服务部署一般基于数据中心的云服务，可以使用的运维工具和可观测工具较为充分，故障的发现和处理能力一般较强，而计算机视觉系统尤其是嵌入式平台的部署，部分”盒子”甚至不处于外网可访问的状态，其故障的发现和调试依赖于自身的软件实现，例如通过记录一些服务的日志然后再进行分析。</p>
<p>总结其业务特点，计算机视觉类应用的部署由于软件和硬件的差异，导致其部署的延迟存在较大的差异化，而服务的延迟测量手段相对单一，对实际的部署条件仿真能力有限，因此延迟的阈值只能作为参考。同时因为且业务场景的特点，具体表现在部分设备边缘计算导致的去中心化并分散的部署在不同的网络条件下，虽然需要提供一定的事后追踪能力，但运维手段和传统的服务端相比较为缺乏，主要体现在安全限制和场景限制导致的可观测性不足。</p>
<p>同时，由于本文实践于具体的业务场景包括港口，交通，安防等检测任务，其服务运行时间长，稳定性需求高，因此对延迟的检测要求集中在可用性方面，</p>
<p>基于动态追踪的延迟测量和分析<br>基于前文所述的</p>
<p>基于计算机视觉系统的应用场景，根据生产的实际需求，有关于延迟的测量和分析，主要应用于开发阶段的<br>性能优化工作，在固定型号的硬件下，提升硬件的吞吐量，即总体性能，QPS</p>
<p>也需要保证延迟控制在允许的范围内，保证延迟处于一个可用的范围</p>
<p>借助两者参考性的给出参数设置的方法，例如brpc设置的流量概念</p>
<p>总结<br>灵活的<br>可拆解</p>
<p>作用是辅助开发设置参数</p>
<p>第二部分的能力主要是针对部分由于安全需求(虹口公安项目)，需要服务于内网的场景，低IO，但需要故障恢复</p>
<ul>
<li><p>历史追踪能力+事后追踪能力<br>复杂性 - 汇报问题 -  几个小时或者几天 –拿到高延迟的数据</p>
</li>
<li><p>识别延迟变化的问题和时间点</p>
</li>
</ul>
<p>现有延迟分析装置的设计与实现<br>基本原则<br>据的详细程度跟资源的占用成正比。如何设计 trace 系统，以及对性能的开销较小，数据又详尽，存储资源（memory 或者物理存储介质）占用较小<br>-基于计时器的测量工具<br>-基于原生分析器的测量和分析<br>-统计维度的延迟分析<br>-基于日志的延迟分析<br>-总结延迟的可观测性<br>-系统性能开销的权衡</p>
<p>计算机视觉系统部署的延迟分析特点</p>
<p>基于动态追踪的延迟分析工具的构建<br>– 路径<br>– 等待时间<br>视觉系统是典型的IO和计算密集的多线程程序，一般的函数延迟分</p>
<p>这些分析可以让你深入了解 TiDB 在执行 SQL 查询时的耗时情况，有助于诊断 TiDB 关键运行路径的问题。除了延迟的指标拆解之外，诊断场景小节介绍了如何在真实场景中分析延迟。</p>
<p>建议在阅读本文前，先阅读 TiDB 性能分析和优化方法。需要注意的是，在将延迟拆解成监控指标时，延迟的耗时数值采用的是均值，而非某几个特定慢查询对应的数值。许多指标都会以直方图的形式展示，以更好地展现耗时或者延迟的分布情况。你需要按如下公式使用总和 (sum) 及数量 (count) 来计算均值 (avg)。<br><a href="https://docs.pingcap.com/zh/tidb/dev/latency-breakdown">https://docs.pingcap.com/zh/tidb/dev/latency-breakdown</a></p>
<p>计算机视觉算法部署场景下的延迟拆解</p>
<p>多硬件条件下的延迟观测评估与分析</p>
<p>延迟分析在操作系统存储估计方面的拓展</p>
<p>总结和展望<br>全文总结<br>        近年来随着半导体芯片产业的快速发展，计算机视觉算法相关的部署实践业务呈现不断加速的趋势，本文以实际的工业应用为出发点，针对不同算法在不同软硬件条件下，部署环节的延迟可靠性，稳定性评估的问题，基于现有条件，设计和实现了一套基础的工具框架。区别于传统的基于日志的记录和观测方式，其核心在于充分利用了内核新特性和计算机视觉算法落地的业务特点，并引入了自动化筛选算法，在降低了监测开销和存储开销的同时，提供了更好的系统可观测性和二次开发的自由度。其中部分内容经过二次开发，应用在操作系统的存储观测，作为开源贡献提交到华为openeuler社区。<br>        本文所取得的主要成功如下<br>   [1]基于绝大多数视觉算法部署基于Linux系统的客观事实，以放弃对操作系统的兼容性为代价，全面采用Linux内核的新特性提供的静态，动态插桩点以及原生异步IO，提出了一个针对计算机视觉<br>   [2]从分布估计的<br>   [3]以 做了评估</p>
<p>未来工作<br>    本文的研究主要关注深度学习算法，尤其是计算机视觉算法在部署落地中有关延迟部分的问题。具体的，</p>
]]></content>
  </entry>
  <entry>
    <title>使用absl时间库实现类python-timestramp部分功能</title>
    <url>/2023/01/01/230101-2/</url>
    <content><![CDATA[<h2 id="时间精度"><a href="#时间精度" class="headerlink" title="时间精度"></a>时间精度</h2><p><img src="/../imgs/23-01-07-0.png" alt="avatar"><br>现有数据的时间精度参考上述数据，在初始阶段，其时间精度包含两个部分</p>
<ul>
<li>[1] <code>date</code>精确度到日期</li>
<li>[2] <code>updatetime &amp;&amp; localtime</code>精确到毫秒<code>ms</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aa[<span class="string">&#x27;datetime&#x27;</span>] = pd.to_datetime(aa[<span class="string">&#x27;date&#x27;</span>].apply(<span class="built_in">str</span>)+<span class="string">&#x27; &#x27;</span>+aa[<span class="string">&#x27;updatetime&#x27;</span>].apply(<span class="built_in">str</span>))</span><br></pre></td></tr></table></figure>
<img src="/../imgs/23-01-07-1.png" alt="avatar"><br>但考察转化成<code>datetime</code>以后的精度，实质上截断了<code>sec</code>以后的所有精度</li>
</ul>
<p>考察之后涉及的操作</p>
<h3 id="Resample"><a href="#Resample" class="headerlink" title="Resample"></a>Resample</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ff.resample(<span class="string">f&#x27;D&#x27;</span>)</span><br><span class="line">ff.resample(<span class="string">f&#x27;<span class="subst">&#123;period&#125;</span>T&#x27;</span>,label=<span class="string">&#x27;right&#x27;</span>,closed=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">between_time(<span class="string">&#x27;09:30&#x27;</span>,<span class="string">&#x27;11:30&#x27;</span>,inclusive=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">pd.Grouper(key=<span class="string">&#x27;datetime&#x27;</span>,freq=<span class="string">f&#x27;T&#x27;</span>,closed=<span class="string">&#x27;right&#x27;</span>,label=<span class="string">&#x27;right&#x27;</span>,dropna=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Tech</category>
        <category>工程实践</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Python</tag>
        <tag>Time</tag>
      </tags>
  </entry>
  <entry>
    <title>Parallel Algorithms of STL</title>
    <url>/2023/01/01/230108-1/</url>
    <content><![CDATA[<h1 id="Parallel-STL-of-C-17"><a href="#Parallel-STL-of-C-17" class="headerlink" title="Parallel STL of C++17"></a>Parallel STL of C++17</h1><p>C++标准库在17版本引入了通过<code>execution policy</code>来指定算法的并行执行策略和向量化方式</p>
<p>其需要<code>#include&lt;execution&gt;</code></p>
<p>在<code>STL</code>中有超过一百种基础算法，在<code>parallel STL</code>中对<code>69</code>种进行了重载，新增了<code>8</code>种</p>
<h2 id="Execution-Policies"><a href="#Execution-Policies" class="headerlink" title="Execution Policies"></a>Execution Policies</h2><p>C++的基础标准提供了三种策略</p>
<ul>
<li>[1]<code>std::execution::sequenced_policy</code></li>
<li>[2]<code>std::execution::parallel_policy</code></li>
<li>[3]<code>std::execution::parallel_unsequenced_policy</code><br>其对应3个tag，对应不同的执行策略，分别为顺序执行，并行执行，和向量化并行</li>
<li>[1]<code>std::execution::seq</code> 一般的顺序执行策略</li>
<li>[2]<code>std::execution::par</code> 启用多线程的并行执行策略</li>
<li>[3]<code>std::execution::par_unseq</code> 允许循环的交错执行，允许指令的向量化<code>(SIMD)</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">std::<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">std::<span class="built_in">sort</span>(std::execution::seq,v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>
<p>C++ 同时允许 <code>std::is_execution_policy</code>来检查是否是标准的执行策略</p>
<h2 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h2><h3 id="std-adjacent-difference-amp-amp-adjacent-find"><a href="#std-adjacent-difference-amp-amp-adjacent-find" class="headerlink" title="std::adjacent_difference &amp;&amp;　adjacent_find"></a>std::adjacent_difference &amp;&amp;　adjacent_find</h3><p>计算相邻元素的差或者和 可以自定义函数op 选择对象是相邻的元素<br>查找两个连续元素　满足一个规则</p>
<h3 id="std-copy-amp-amp-std-copy-if-amp-amp-copy-n"><a href="#std-copy-amp-amp-std-copy-if-amp-amp-copy-n" class="headerlink" title="std::copy &amp;&amp; std::copy_if &amp;&amp; copy_n"></a>std::copy &amp;&amp; std::copy_if &amp;&amp; copy_n</h3><p>序列拷贝到序列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::<span class="built_in">copy_if</span>(from_vector.<span class="built_in">begin</span>(), from_vector.<span class="built_in">end</span>(),</span><br><span class="line">                std::<span class="built_in">back_inserter</span>(to_vector),</span><br><span class="line">                [](<span class="type">int</span> x) &#123; <span class="keyword">return</span> x % <span class="number">3</span> == <span class="number">0</span>; &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="std-count-amp-amp-std-count-if-amp-amp-std-count-if-not"><a href="#std-count-amp-amp-std-count-if-amp-amp-std-count-if-not" class="headerlink" title="std::count &amp;&amp; std::count_if &amp;&amp; std::count_if_not"></a>std::count &amp;&amp; std::count_if &amp;&amp; std::count_if_not</h3><h3 id="std-find-amp-amp-std-find-end-amp-amp-find-first-of-amp-amp-find-if"><a href="#std-find-amp-amp-std-find-end-amp-amp-find-first-of-amp-amp-find-if" class="headerlink" title="std::find &amp;&amp; std::find_end &amp;&amp; find_first_of &amp;&amp; find_if"></a>std::find &amp;&amp; std::find_end &amp;&amp; find_first_of &amp;&amp; find_if</h3><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><h3 id="std-fill-amp-amp-std-fill-n"><a href="#std-fill-amp-amp-std-fill-n" class="headerlink" title="std::fill &amp;&amp; std::fill_n"></a>std::fill &amp;&amp; std::fill_n</h3><h3 id="std-inner-product"><a href="#std-inner-product" class="headerlink" title="std::inner_product"></a>std::inner_product</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; b&#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> r1 = std::<span class="built_in">inner_product</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), b.<span class="built_in">begin</span>(), <span class="number">1</span>);</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Inner product of a and b: &quot;</span> &lt;&lt; r1 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> r2 = std::<span class="built_in">inner_product</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), b.<span class="built_in">begin</span>(), <span class="number">-1</span>,</span><br><span class="line">                                std::plus&lt;&gt;(), std::equal_to&lt;&gt;());</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Number of pairwise matches between a and b: &quot;</span> &lt;&lt;  r2 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数的设计有意思的地方在于，实质上没有限制具体需要实现的函数接口，内积只是一个表达形式，其实际的实现是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">InputIt1</span>, <span class="keyword">class</span> <span class="title class_">InputIt2</span>, <span class="keyword">class</span> <span class="title class_">T</span>,</span><br><span class="line">         <span class="keyword">class</span> <span class="title class_">BinaryOperation1</span>, <span class="keyword">class</span> <span class="title class_">BinaryOperation2</span>&gt;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="comment">// since C++20</span></span><br><span class="line"><span class="function">T <span class="title">inner_product</span><span class="params">(InputIt1 first1, InputIt1 last1,</span></span></span><br><span class="line"><span class="params"><span class="function">                InputIt2 first2, T init,</span></span></span><br><span class="line"><span class="params"><span class="function">                BinaryOperation1 op1</span></span></span><br><span class="line"><span class="params"><span class="function">                BinaryOperation2 op2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (first1 != last1)</span><br><span class="line">    &#123;</span><br><span class="line">         init = <span class="built_in">op1</span>(std::<span class="built_in">move</span>(init), <span class="built_in">op2</span>(*first1, *first2)); <span class="comment">// std::move since C++20</span></span><br><span class="line">         ++first1;</span><br><span class="line">         ++first2;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> init;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此两个接口有很强的拓展性,具体的可以理解为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pair_wise + iter </span><br></pre></td></tr></table></figure>
<p>但目前的stl并行还没有支持，不知道为什么书里写了</p>
<h3 id="std-find-amp-amp-std-find-if-not"><a href="#std-find-amp-amp-std-find-if-not" class="headerlink" title="std::find &amp;&amp; std::find_if_not"></a>std::find &amp;&amp; std::find_if_not</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIt, <span class="keyword">class</span> UnaryPredicate&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> InputIt <span class="title">find_if_not</span><span class="params">(InputIt first, InputIt last, UnaryPredicate q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; first != last; ++first)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">q</span>(*first))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="is-partitioned-amp-amp-partition"><a href="#is-partitioned-amp-amp-partition" class="headerlink" title="is_partitioned &amp;&amp; partition"></a>is_partitioned &amp;&amp; partition</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> InputIt, <span class="keyword">class</span> UnaryPredicate &gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_partitioned</span><span class="params">(InputIt first, InputIt last, UnaryPredicate p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; first != last; ++first)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">p</span>(*first))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span> (; first != last; ++first)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">p</span>(*first))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很有用的工具，可以利用函数进行二元分区</p>
<h3 id="max-element"><a href="#max-element" class="headerlink" title="max_element"></a>max_element</h3><h3 id="mismatch"><a href="#mismatch" class="headerlink" title="mismatch"></a>mismatch</h3><p>查看两个序列是否匹配，以及不匹配的位置</p>
<h3 id="partial-sort"><a href="#partial-sort" class="headerlink" title="partial_sort"></a>partial_sort</h3><p>部分排序</p>
<h3 id="remove-amp-amp-remove-if-amp-amp-remove-copy-amp-amp-remove-copy-if"><a href="#remove-amp-amp-remove-if-amp-amp-remove-copy-amp-amp-remove-copy-if" class="headerlink" title="remove &amp;&amp; remove_if &amp;&amp; remove_copy &amp;&amp; remove_copy_if"></a>remove &amp;&amp; remove_if &amp;&amp; remove_copy &amp;&amp; remove_copy_if</h3><p>满足条件则删除 或者满足值就删除</p>
<h3 id="replace-amp-amp-replace-copy-amp-amp-replace-copy-if"><a href="#replace-amp-amp-replace-copy-amp-amp-replace-copy-if" class="headerlink" title="replace &amp;&amp; replace_copy &amp;&amp; replace_copy_if"></a>replace &amp;&amp; replace_copy &amp;&amp; replace_copy_if</h3><h3 id="reverse-amp-amp-reverse-copy-amp-amp-reverse-copy-if"><a href="#reverse-amp-amp-reverse-copy-amp-amp-reverse-copy-if" class="headerlink" title="reverse &amp;&amp; reverse_copy &amp;&amp; reverse_copy_if"></a>reverse &amp;&amp; reverse_copy &amp;&amp; reverse_copy_if</h3><h3 id="rotate-amp-amp-rotate-copy"><a href="#rotate-amp-amp-rotate-copy" class="headerlink" title="rotate &amp;&amp; rotate_copy"></a>rotate &amp;&amp; rotate_copy</h3><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><h3 id="std-set-symmetric-difference"><a href="#std-set-symmetric-difference" class="headerlink" title="std::set_symmetric_difference"></a>std::set_symmetric_difference</h3><p>在两个集合有序的情况下，求对称的差集</p>
<h3 id="std-stable-sort-amp-amp-std-stable-partition"><a href="#std-stable-sort-amp-amp-std-stable-partition" class="headerlink" title="std::stable_sort &amp;&amp; std::stable_partition"></a>std::stable_sort &amp;&amp; std::stable_partition</h3><p>排序，用处不大</p>
<h3 id="std-uninitialized-copy-n"><a href="#std-uninitialized-copy-n" class="headerlink" title="std::uninitialized_copy_n"></a>std::uninitialized_copy_n</h3><p>拷贝一定数量的元素</p>
<h3 id="unique-copy"><a href="#unique-copy" class="headerlink" title="unique_copy"></a>unique_copy</h3><p>去除相邻的重复元素</p>
<h3 id="equal"><a href="#equal" class="headerlink" title="equal"></a>equal</h3><p>判断相等</p>
<h3 id="std-inplace-merge"><a href="#std-inplace-merge" class="headerlink" title="std::inplace_merge"></a>std::inplace_merge</h3><p>归并排序的实现 本地</p>
<h3 id="is-sorted-amp-amp-is-sorted-until"><a href="#is-sorted-amp-amp-is-sorted-until" class="headerlink" title="is_sorted &amp;&amp; is_sorted_until"></a>is_sorted &amp;&amp; is_sorted_until</h3><p>查看是否是一个偏序列关系集合</p>
<h3 id="all-of-amp-amp-all-of-amp-amp-none-of"><a href="#all-of-amp-amp-all-of-amp-amp-none-of" class="headerlink" title="all_of &amp;&amp; all_of &amp;&amp; none_of"></a>all_of &amp;&amp; all_of &amp;&amp; none_of</h3><p>返回一个bool值 对一个迭代范围进行判断</p>
<h3 id="max-element-amp-amp-min-element-amp-amp-minmax-element-amp-amp-nth-element"><a href="#max-element-amp-amp-min-element-amp-amp-minmax-element-amp-amp-nth-element" class="headerlink" title="max_element &amp;&amp; min_element &amp;&amp; minmax_element &amp;&amp; nth_element"></a>max_element &amp;&amp; min_element &amp;&amp; minmax_element &amp;&amp; nth_element</h3><h3 id="generate-amp-amp-generate"><a href="#generate-amp-amp-generate" class="headerlink" title="generate &amp;&amp; generate()"></a>generate &amp;&amp; generate()</h3>]]></content>
      <categories>
        <category>Tech</category>
        <category>Read_report</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Parallel</tag>
      </tags>
  </entry>
  <entry>
    <title>Parallel Algorithms of STL</title>
    <url>/2023/01/10/230110-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Tech</category>
        <category>Read_report</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Parallel</tag>
      </tags>
  </entry>
</search>
