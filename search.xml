<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++编译优化-EBO</title>
    <url>/2022/12/24/221222-2/</url>
    <content><![CDATA[<h1 id="Empty-Base-Class-Optimisation-EBO"><a href="#Empty-Base-Class-Optimisation-EBO" class="headerlink" title="Empty Base Class Optimisation (EBO)"></a>Empty Base Class Optimisation (EBO)</h1><p><code>EBO</code> 的方法是, 通过继承空基类来避免对象大小的增加</p>
<p>在C++中,一个empty object至少也要占一个字节, 但如果这个对象是以基类部分的形式存在,则不会占用额外的空间</p>
<p>具体的,如果<code>class A</code>为空,则 <code>class B : A</code> 不会增加大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A2</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span> : A1&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span> : A2&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(B1) &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; <span class="built_in">sizeof</span>(B2) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 4</span></span><br></pre></td></tr></table></figure>

<h1 id="How-unique-ptr-apply-EBO"><a href="#How-unique-ptr-apply-EBO" class="headerlink" title="How unique_ptr apply EBO"></a>How unique_ptr apply EBO</h1><p>一个<code>EBO</code>使用可见于无状态的<code>lambda deleter</code>在<code>unique_ptr</code> 上的应用</p>
<ul>
<li><a href="/2022/12/22/221222-1/" title="C++内存分配-unqiue_ptr">&#96;C++内存分配-unqiue_ptr</a></li>
</ul>
<p>具体的,参考g++ libc++观察对<code>__uniq_ptr_data</code>的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Dp = default_delete&lt;_Tp&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> unique_ptr&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">using</span> deleter_type  = _Dp;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    tuple&lt;pointer, _Dp&gt; _M_t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>_M_t</code>就是存放指针和<code>deleter</code>的位置, 做一个小的尝试</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">B1* b_ptr;</span><br><span class="line"><span class="function">std::tuple&lt;<span class="title">decltype</span><span class="params">(b_ptr)</span>,A1&gt; <span class="title">s</span><span class="params">(b_ptr,A1())</span></span>;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(s) &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//8, only b_ptr</span></span><br></pre></td></tr></table></figure>
<p>发现在tuple中,如果元素为空类,其大小会被优化, 由此引发两个问题</p>
<ul>
<li>[1]tuple如何确定A1是一个空类</li>
<li>[2]tuple如何存储这个空类</li>
</ul>
<p>可以在tuple的源码中找到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Using EBO for elements that are tuples causes ambiguous base errors.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _El0, <span class="keyword">typename</span>... _El&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__is_empty_non_tuple</span>&lt;tuple&lt;_El0, _El...&gt;&gt; : false_type &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the Empty Base-class Optimization for empty, non-final types.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">using</span> __empty_not_final</span><br><span class="line">  = <span class="keyword">typename</span> conditional&lt;__is_final(_Tp), false_type,</span><br><span class="line">	   __is_empty_non_tuple&lt;_Tp&gt;&gt;::type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head,</span><br><span class="line">  <span class="type">bool</span> = __empty_not_final&lt;_Head&gt;::value&gt;</span><br><span class="line">  <span class="keyword">struct</span> _Head_base;</span><br></pre></td></tr></table></figure>
<pre><code>std::cout &lt;&lt; std::is_empty_v&lt;decltype(lam1)&gt; &lt;&lt; std::endl;
std::cout &lt;&lt; std::is_empty_v&lt;decltype(lam2)&gt; &lt;&lt; std::endl;
</code></pre>
<p>而其中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// is_empty</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">is_empty</span></span><br><span class="line">  : <span class="keyword">public</span> integral_constant&lt;<span class="type">bool</span>, __is_empty(_Tp)&gt;</span><br><span class="line">  &#123; &#125;;</span><br></pre></td></tr></table></figure>
<p>根据是否是空类,会用不同的判定</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> lam1= [&amp;](<span class="type">int</span> y) &#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;lam with state&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">sizeof</span>(lam1) &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">auto</span> lam2 = [](<span class="type">int</span> y) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;lam without state&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;;</span><br><span class="line">std::cout &lt;&lt; std::is_empty_v&lt;<span class="keyword">decltype</span>(lam1)&gt; &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; std::is_empty_v&lt;<span class="keyword">decltype</span>(lam2)&gt; &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// 0 1</span></span><br></pre></td></tr></table></figure>
<p>tuple实现的时候,</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head, <span class="keyword">typename</span>... _Tail&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">_Tuple_impl</span>&lt;_Idx, _Head, _Tail...&gt;</span><br><span class="line">  : <span class="keyword">public</span> _Tuple_impl&lt;_Idx + <span class="number">1</span>, _Tail...&gt;,</span><br><span class="line">    <span class="keyword">private</span> _Head_base&lt;_Idx, _Head&gt;</span><br></pre></td></tr></table></figure>

<p> <code>public</code> 继承表达的<code>is-a</code>关系，<code>private</code> 继承隐含的意思其实是 <code>is-implemented-in-terms-of</code>，即<code>由…实现出</code><br>这里表示,<code>_Head_base</code>是其中的一部分,我们获得了<code>_Head_base</code>的接口,但这只是一个特化的空类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;std::<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head, <span class="type">bool</span> = __empty_not_final&lt;_Head&gt;::value&gt;</span><br><span class="line"><span class="keyword">struct</span> _Head_base;</span><br><span class="line"><span class="keyword">template</span>&lt;std::<span class="type">size_t</span> _Idx, <span class="keyword">typename</span> _Head&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Head_base</span>&lt;_Idx, _Head, <span class="literal">true</span>&gt; : <span class="keyword">public</span> _Head</span><br><span class="line">&#123; &#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Memory</tag>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>C++内存分配-unqiue_ptr</title>
    <url>/2022/12/22/221222-1/</url>
    <content><![CDATA[<p>本文主要讨论内存角度对<code>C++</code>智能指针<code>unique_ptr</code>的观察</p>
<h2 id="Memory-usage-of-unique-ptr"><a href="#Memory-usage-of-unique-ptr" class="headerlink" title="Memory usage of unique_ptr"></a>Memory usage of unique_ptr</h2><p><code>unique_ptr</code>的内存模型如下<br><img src="/../imgs/22-12-24-0.png" alt="avatar"></p>
<p>由此不难理解,一般的<code>unique_ptr</code>和正常指针的空间占用相同,而当<code>unique_ptr</code>包含自己的<code>delete</code>,其需要在堆上开辟自己的内存空间</p>
<p>一个简单的例子</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_x;</span><br><span class="line">    <span class="type">int</span> m_y;</span><br><span class="line">    <span class="type">int</span> m_z;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z):</span><br><span class="line">    <span class="built_in">m_x</span>(x),<span class="built_in">m_y</span>(y),<span class="built_in">m_z</span>(z)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*code here*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在x64下,显然不包含<code>delete</code>的<code>unique_ptr</code>大小是一个普通指针的大小,并没有额外的实现,这和其构造器的实现有关</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    Widget* pw = <span class="keyword">new</span> <span class="built_in">Widget</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Widget&gt; <span class="title">w1</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    <span class="keyword">delete</span> pw;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(w1) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当<code>delete</code>是一个函数对象,则去居于函数对象额外数据大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DeleteObject</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Widget* w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> w;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Using DeleteObject&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int64_t</span> padding_size1;</span><br><span class="line">    <span class="type">int64_t</span> padding_size2;</span><br><span class="line">&#125;;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Widget,DeleteObject&gt; <span class="title">w2</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span></span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">sizeof</span>(w2) &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//24,8 for ptr and 8+8 for padding</span></span><br></pre></td></tr></table></figure>
<p>使用lldb调试,打印w2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">w2</span></span></span><br><span class="line"><span class="function"><span class="params">(std::unique_ptr&lt;Widget, DeleteObject&gt;)</span> $0 </span>= <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">  deleter = (padding_size = <span class="number">0</span>, padding_size2 = <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针地址和是数据地址是连续的,函数在别的位置</p>
<p>当<code>delete</code>是一个函数指针,去取决于编译器实现,一般的会增大一个指针的大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">DeleteFunction</span><span class="params">(Widget* w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> w;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Using DeleteFunction&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//function delete</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">std::unique_ptr&lt;Widget,<span class="title">void</span><span class="params">(*)</span><span class="params">(Widget*)</span>&gt; <span class="title">w3</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),DeleteFunction)</span></span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="built_in">sizeof</span>(w3) &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//16 function_ptr + unique_ptr</span></span><br></pre></td></tr></table></figure>
<p>此时函数指针的位置被设置在<code>deleter</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">w3</span></span></span><br><span class="line"><span class="function"><span class="params">(std::unique_ptr&lt;Widget, <span class="type">void</span> (*)(Widget *)&gt;)</span> $1 </span>= <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">  deleter = <span class="number">0x0000555555555220</span> (a.out`<span class="built_in">DeleteFunction</span>(Widget*) at unqiue_test.cpp:<span class="number">23</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当<code>deleter</code>是一个无状态函数,lamda表达式且不带捕获,则不会占用任何内存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lambda delete</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">auto</span> lam= [](Widget* w) &#123;</span><br><span class="line">        <span class="keyword">delete</span> w;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;lam delete w&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="function">std::unique_ptr&lt;Widget,<span class="title">decltype</span><span class="params">(lam)</span>&gt; <span class="title">w4</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),lam)</span></span>;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(w4) &lt;&lt; std::endl;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(lam) &lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以通过lldb观察,确实没有进行额外的储存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">w4</span></span></span><br><span class="line"><span class="function"><span class="params">(std::unique_ptr&lt;Widget, deleter_type&gt;)</span> $3 </span>= <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">&#125;</span><br><span class="line">(lldb) p <span class="built_in">lam</span></span><br><span class="line">(deleter_type) $<span class="number">4</span> = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用带捕获的<code>(&amp;)</code> lambda函数,则会获得额外的大小</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//lambda delete with &amp;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">auto</span> lam= [&amp;](Widget* w) &#123;</span><br><span class="line">        <span class="keyword">delete</span> w;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;lam delete w&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="function">std::unique_ptr&lt;Widget,<span class="title">decltype</span><span class="params">(lam)</span>&gt; <span class="title">w5</span><span class="params">(<span class="keyword">new</span> Widget(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),lam)</span></span>;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(w5) &lt;&lt; std::endl;</span><br><span class="line">     std::cout &lt;&lt; <span class="built_in">sizeof</span>(lam) &lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体在内存中则是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(lldb) <span class="function">p <span class="title">lam</span></span></span><br><span class="line"><span class="function"><span class="params">((unnamed <span class="keyword">class</span>))</span> $0 </span>= &#123;</span><br><span class="line">  x = <span class="number">0x00007fffffffdafc</span></span><br><span class="line">&#125;</span><br><span class="line">(lldb) p <span class="built_in">w5</span></span><br><span class="line">(std::unique_ptr&lt;Widget, (unnamed <span class="keyword">class</span>)&gt;) $<span class="number">1</span> = <span class="number">0x55555556d2e0</span> &#123;</span><br><span class="line">  pointer = <span class="number">0x000055555556d2e0</span></span><br><span class="line">  deleter = &#123;</span><br><span class="line">    x = <span class="number">0x00007fffffffdafc</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到额外保存了一份状态信息</p>
<p>那么C++是如何保存和unique_ptr匹配的lambda函数,这涉及到<code>EBO</code></p>
<ul>
<li><a href="/2022/12/24/221222-2/" title="C++编译优化-EBO">&#96;C++编译优化-EBO&#96;</a></li>
</ul>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Memory</tag>
        <tag>Smart_pointer</tag>
      </tags>
  </entry>
</search>
